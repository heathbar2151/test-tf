name: Update Version Reference in Matching Repos

on:
  push:
    tags:
      - 'v*'  # Triggers the workflow on any tag starting with "v"

jobs:
  update_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo A
        uses: actions/checkout@v2

      - name: Extract version from tag
        id: get_version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=$version" >> $GITHUB_ENV

      - name: Find Repos with Naming Convention
        id: find_repos
        uses: actions/github-script@v6
        with:
          script: |
            const namingPattern = /^test\d+$/;
            const repos = [];

            for await (const response of github.paginate.iterator(github.rest.repos.listForAuthenticatedUser, { visibility: "all" })) {
              repos.push(...response.data.filter(repo => namingPattern.test(repo.name)));
            }

            console.log("Matching repositories:", repos);
            return JSON.stringify(repos.map(repo => ({
              owner: repo.owner.login,
              name: repo.name,
              path: 'sbx/alerts.json'
            })));

      - name: Update JSON files in Matching Repos
        uses: actions/github-script@v6
        env:
          VERSION: ${{ env.version }}
        with:
          script: |
            const version = process.env.VERSION;
            const repos = JSON.parse(${ { steps.find_repos.outputs.result } });

            async function updateFile(owner, repo, path) {
              const { data: file } = await github.rest.repos.getContent({
                owner,
                repo,
                path
              });

              const content = Buffer.from(file.content, 'base64').toString();
              const jsonContent = JSON.parse(content);
              jsonContent.version = version;
              
              const updatedContent = Buffer.from(JSON.stringify(jsonContent, null, 2)).toString('base64');

              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path,
                message: `Update version to ${version}`,
                content: updatedContent,
                sha: file.sha,
                branch: 'main'
              });
            }

            await Promise.all(repos.map(repo => updateFile(repo.owner, repo.name, repo.path)));
            console.log("Version updated in matching repos");
