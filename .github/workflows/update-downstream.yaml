name: Update Version References in Repos B and C

on:
  push:
    tags:
      - 'v*'  # Trigger workflow on any tag push (e.g., v1.2.3 -> v1.2.4)

jobs:
  update_version_references:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository where the version is updated
    - name: Checkout Repo A
      uses: actions/checkout@v3

    # Step 2: Get the tag (version) of the latest push
    - name: Get version tag
      id: get_version
      run: |
        VERSION_TAG=$(echo "${GITHUB_REF#refs/tags/}")
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

    # Step 3: Find repos that follow the naming convention "test{number}"
    - name: Find Repos with Naming Convention
      id: find_repos
      env:
        REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        # Create a temporary .mjs file to hold the JavaScript code (using ESM syntax)
        echo "
        import { Octokit } from '@octokit/rest'; // Use 'import' for ESM
        import fetch from 'node-fetch'; // Import the 'fetch' polyfill for Node.js

        const octokit = new Octokit({ 
          auth: process.env.REPO_TOKEN, 
          request: { fetch }  // Pass 'fetch' to Octokit
        });
        const namingPattern = /^test\\d+$/;
        const repos = [];

        (async () => {
          for await (const response of octokit.paginate.iterator(octokit.rest.repos.listForAuthenticatedUser, { visibility: 'all' })) {
            repos.push(...response.data.filter(repo => namingPattern.test(repo.name)));
          }

          console.log('Matching repositories:', repos);
          console.log('repos:', JSON.stringify(repos.map(repo => ({
            owner: repo.owner.login,
            name: repo.name,
            path: 'path/to/version.json'
          }))));
          process.exit(0);
        })();
        " > find-repos.mjs

        # Install the 'node-fetch' package to polyfill fetch
        npm install node-fetch

        # Run the JavaScript code with Node.js
        node --experimental-modules find-repos.mjs

    # Step 4: Update JSON files in Repos B and C
    - name: Update JSON files in Repos B and C
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ steps.find_repos.outputs.repos }}  # The repos from the previous step
        event-type: update-version
        client-payload: '{"version": "${{ env.VERSION_TAG }}"}'
